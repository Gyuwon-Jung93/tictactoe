import mams.web.HttpResponse;
import mams.JSONConverter;
import mams.JSONBuilder;
import astra.jena.*;
import com.fasterxml.jackson.databind.JsonNode;

agent Better extends Player {
   types strategy {
        formula winning_lines(list);  // winning pattern
    }

    // winning pattern(he knows what he needs to do for winning)
    initial winning_lines([[
        ["11","12","13"],
        ["21","22","23"],
        ["31","32","33"],
        ["11","21","31"],
        ["12","22","32"],
        ["13","23","33"],
        ["11","22","33"],
        ["13","22","31"]
    ]]);

    // make_move rule redefine
    rule +!handle_move(string form_url, string method, string id) : game(id, string role, string opponent) {
        console.println("Better handle_move called");
        // 1. winning chance check
        !check_winning_move(role);
        
        // 2. block opponent's winning
        if(~last_move(string anyMove)) {
            !block_opponent_win(role);
        }
        
        // 3. take centre first
        if(~last_move(string anyMove)) {
            console.println("Trying center...");
            !try_center();
        }
        
        // 4. corner strategy
        if(~last_move(string anyMove)) {
            !try_corners(role);
        }
        
        // 5. the rest cell
        if(~last_move(string anyMove)) {
            !take_any_free();
        }

        // move run
        if(last_move(string chosen_square)) {
            console.println("Making move to square: " + chosen_square);

                JsonNode bodyJson = builder.createObject();
                query(agent_attributes("@id", string agentURL));
                builder.addProperty(bodyJson, "@id", agentURL);
                builder.addProperty(bodyJson, "ttt:square", chosen_square);
                string bodyStr = builder.toJsonString(bodyJson);
                console.println("Better move request body: " + bodyStr);

                if (strings.equal(method, "POST")) {
                    MAMSAgent::!post(form_url, bodyStr, HttpResponse response);
                    console.println("Better made move at: " + chosen_square);
                } else if (strings.equal(method, "PUT")) {
                    MAMSAgent::!put(form_url, bodyStr, HttpResponse response);
                    console.println("Better made move at: " + chosen_square);
                }
               } else {
            console.println("Better: No move chosen!");
        }

        }

    // Check winning chance
    rule +!check_winning_move(string role) {
        query(winning_lines([[list all_lines]]));
        forall(list line : all_lines) {
            int my_count = 0;
            string empty_square = "";
            
            forall(string sq : line) {
                if(move(sq, role)) {
                    my_count = my_count + 1;
                } else if(free(sq)) {
                    empty_square = sq;
                }
            }
            
            if(my_count == 2 & ~strings.equal(empty_square, "")) {
                +last_move(empty_square);
            }
        }
    }

    // block opponenet's winning
    rule +!block_opponent_win(string role) {
        query(winning_lines([[list all_lines]]));
        forall(list line : all_lines) {
            int opp_count = 0;
            string empty_square = "";
            
            forall(string sq : line) {
                if(move(sq, string anyPlayer) & ~strings.equal(anyPlayer, role)) {
                    opp_count = opp_count + 1;
                } else if(free(sq)) {
                    empty_square = sq;
                }
            }
            
            if(opp_count == 2 & ~strings.equal(empty_square, "")) {
                +last_move(empty_square);
            }
        }
    }

    // take centre 
    rule +!try_center() {
        if(free("22")) {
            console.println("Better: Center is free, taking it!");
            +last_move("22");
            +move("22", "ttt:XPlayerRole"); // move belief 추가
            -free("22");  // free belief 제거
        }
    }

    // corner strategy
    rule +!try_corners(string role) {
        // diagonal corner strategy
        if(free("11")) {
            +last_move("11");
        } else if(free("33") & move("11", role)) {
            +last_move("33");
        } else if(free("13")) {
            +last_move("13");
        } else if(free("31") & move("13", role)) {
            +last_move("31");
        }
    }

    // select the rest cell
    rule +!take_any_free() {
        if(free("12")) {
            +last_move("12");
        } else if(free("21")) {
            +last_move("21");
        } else if(free("23")) {
            +last_move("23");
        } else if(free("32")) {
            +last_move("32");
        }
    }
}